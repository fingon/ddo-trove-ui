package templates

import (
	"github.com/fingon/ddo-trove-ui/db"
	"strconv"
)

templ Index(items []db.Item, itemTypes []string, selectedType string, itemSubTypes []string, selectedSubType string, characterNames []string, selectedCharacter string, minLevel, maxLevel, currentPage, totalPages, totalFilteredItemsCount int, uniqueEquipsTo []string, selectedEquipsTo string) {
	@Layout("DDO Trove UI") {
		<h1>DDO Trove Item Browser</h1>
		<div class="filter-controls">
			<div class="filter-row">
				<label for="itemTypeFilter">Filter by Item Type:</label>
				<select
					id="itemTypeFilter"
					name="itemType"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="change"
					hx-include="#itemSubTypeFilter, #characterFilter, #nameSearch, #minLevel, #maxLevel, #equipsToFilter"
				>
					<option
						value="All"
						if selectedType == "" || selectedType == "All" {
							selected
						}
					>All</option>
					for _, itemType := range itemTypes {
						<option
							value={ itemType }
							if itemType == selectedType {
								selected
							}
						>{ itemType }</option>
					}
				</select>
				<label for="itemSubTypeFilter">Item Sub Type:</label>
				<select
					id="itemSubTypeFilter"
					name="itemSubType"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="change"
					hx-include="#itemTypeFilter, #characterFilter, #nameSearch, #minLevel, #maxLevel, #equipsToFilter"
				>
					<option
						value="All"
						if selectedSubType == "" || selectedSubType == "All" {
							selected
						}
					>All</option>
					for _, itemSubType := range itemSubTypes {
						<option
							value={ itemSubType }
							if itemSubType == selectedSubType {
								selected
							}
						>{ itemSubType }</option>
					}
				</select>
				<label for="characterFilter">Character:</label>
				<select
					id="characterFilter"
					name="characterName"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="change"
					hx-include="#itemTypeFilter, #itemSubTypeFilter, #nameSearch, #minLevel, #maxLevel, #equipsToFilter"
				>
					<option
						value="All"
						if selectedCharacter == "" || selectedCharacter == "All" {
							selected
						}
					>All</option>
					for _, charName := range characterNames {
						<option
							value={ charName }
							if charName == selectedCharacter {
								selected
							}
						>{ charName }</option>
					}
				</select>
			</div>
			<div class="filter-row">
				<label for="equipsToFilter">Equips To:</label>
				<select
					id="equipsToFilter"
					name="equipsTo"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="change"
					hx-include="#itemTypeFilter, #itemSubTypeFilter, #characterFilter, #nameSearch, #minLevel, #maxLevel"
				>
					<option
						value="All"
						if selectedEquipsTo == "" || selectedEquipsTo == "All" {
							selected
						}
					>All</option>
					for _, equipsTo := range uniqueEquipsTo {
						<option
							value={ equipsTo }
							if equipsTo == selectedEquipsTo {
								selected
							}
						>{ equipsTo }</option>
					}
				</select>
			</div>
			<div class="filter-row">
				<label for="minLevel">Min Level:</label>
				<input
					type="number"
					id="minLevel"
					name="minLevel"
					value={ strconv.Itoa(minLevel) }
					min="0"
					max="40"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="input changed delay:500ms"
					hx-include="#itemTypeFilter, #itemSubTypeFilter, #characterFilter, #nameSearch, #maxLevel, #equipsToFilter"
				/>
				<label for="maxLevel">Max Level:</label>
				<input
					type="number"
					id="maxLevel"
					name="maxLevel"
					value={ strconv.Itoa(maxLevel) }
					min="0"
					max="40"
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="input changed delay:500ms"
					hx-include="#itemTypeFilter, #itemSubTypeFilter, #characterFilter, #nameSearch, #minLevel, #equipsToFilter"
				/>
				<label for="nameSearch">Full Text Search:</label>
				<input
					type="text"
					id="nameSearch"
					name="nameSearch"
					placeholder="Search names, effects, descriptions..."
					hx-get="/filter"
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					hx-trigger="input changed delay:500ms"
					hx-include="#itemTypeFilter, #itemSubTypeFilter, #characterFilter, #minLevel, #maxLevel, #equipsToFilter"
				/>
			</div>
		</div>
		<div id="item-list-container" hx-preserve="true">
			@ItemList(items, selectedType, selectedSubType, selectedCharacter, currentPage, totalPages, totalFilteredItemsCount, selectedEquipsTo)
		</div>
	}
}
