package templates

import "github.com/fingon/ddo-trove-ui/db"
import "strconv"
import "strings"

templ ItemList(items []db.Item, selectedType string, selectedSubType string, selectedCharacter string, currentPage, totalPages, totalFilteredItemsCount int, selectedEquipsTo string) {
	// Pagination controls at the top
	<div class="pagination-controls">
		if currentPage > 1 {
			<button
				hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(currentPage-1) + "&equipsTo=" + selectedEquipsTo }
				hx-target="#item-list-container"
				hx-swap="innerHTML"
				class="pagination-button"
				hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
			>
				Previous
			</button>
		}

		// Show page numbers (simplified logic for templ)
		if totalPages <= 10 {
			for i := 1; i <= totalPages; i++ {
				<button
					hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
					hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
				>
					{ strconv.Itoa(i) }
				</button>
			}
		} else {
			// Show first few pages
			if currentPage <= 6 {
				for i := 1; i <= 10; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			} else if currentPage >= totalPages-5 {
				// Show last 10 pages
				for i := totalPages-9; i <= totalPages; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			} else {
				// Show pages around current page
				for i := currentPage-4; i <= currentPage+5; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			}
		}

		if currentPage < totalPages {
			<button
				hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(currentPage+1) + "&equipsTo=" + selectedEquipsTo }
				hx-target="#item-list-container"
				hx-swap="innerHTML"
				class="pagination-button"
				hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
			>
				Next
			</button>
		}
	</div>

	<p class="item-count">Found { strconv.Itoa(totalFilteredItemsCount) } items.</p>

	<div class="item-list">
		if len(items) == 0 {
			<p>No items found matching the selected criteria.</p>
		} else {
			for _, item := range items {
				<div class="item-row">
					if item.IconSource != "" {
						<img src={ item.IconSource } alt="Item Icon" class="item-icon">
					}
					if item.Binding == "BoundToCharacter" {
						<div class="item-name btc">{ item.Name } (BTC)</div>
					} else {
						<div class="item-name">{ item.Name }</div>
					}
					<div class="item-type">{ item.ItemType }</div>
					<div class="item-character">{ item.CharacterName }</div>
					<div class="item-min-level">Lvl: { strconv.Itoa(item.MinimumLevel) }</div>
					<div class="item-quantity">Qty: { strconv.Itoa(item.Quantity) }</div>
					<div class="item-equips-to">Equips: { strings.Join(item.EquipsTo, ", ") }</div>

					<div class="item-tooltip">
						if item.Binding == "BoundToCharacter" {
							<h4 class="btc">{ item.Name } (BTC)</h4>
						} else {
							<h4>{ item.Name }</h4>
						}
						<p><strong>Type:</strong> { item.ItemType }</p>
						<p><strong>Character:</strong> { item.CharacterName }</p>
						<p><strong>Quantity:</strong> { strconv.Itoa(item.Quantity) }</p>
						<p><strong>Minimum Level:</strong> { strconv.Itoa(item.MinimumLevel) }</p>
						<p><strong>Location:</strong> { item.Container } - { item.TabName } (Tab { strconv.Itoa(item.Tab) }), Row { strconv.Itoa(item.Row) }, Col { strconv.Itoa(item.Column) }</p>
						if len(item.EquipsTo) > 0 {
							<p><strong>Equips To:</strong> { strings.Join(item.EquipsTo, ", ") }</p>
						}
						if item.Description != "" {
							<p><strong>Description:</strong> { item.Description }</p>
						}
						if item.Clicky != nil {
							<p><strong>Clicky:</strong> { item.Clicky.SpellName } (CL { strconv.Itoa(item.Clicky.CasterLevel) })</p>
						}
						if len(item.AugmentSlots) > 0 {
							<p><strong>Augment Slots:</strong></p>
							<ul>
								for _, slot := range item.AugmentSlots {
									<li>{ slot.Name } ({ slot.Color })</li>
								}
							</ul>
						}
						if len(item.Effects) > 0 {
							<p><strong>Effects:</strong></p>
							<ul>
								for _, effect := range item.Effects {
									<li>{ effect.Name }: { effect.Description }</li>
								}
							</ul>
						}
					</div>
				</div>
			}
		}
	</div>
	<div class="pagination-controls">
		if currentPage > 1 {
			<button
				hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(currentPage-1) + "&equipsTo=" + selectedEquipsTo }
				hx-target="#item-list-container"
				hx-swap="innerHTML"
				class="pagination-button"
				hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
			>
				Previous
			</button>
		}

		// Show page numbers (simplified logic for templ)
		if totalPages <= 10 {
			for i := 1; i <= totalPages; i++ {
				<button
					hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
					hx-target="#item-list-container"
					hx-swap="innerHTML"
					class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
					hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
				>
					{ strconv.Itoa(i) }
				</button>
			}
		} else {
			// Show first few pages
			if currentPage <= 6 {
				for i := 1; i <= 10; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			} else if currentPage >= totalPages-5 {
				// Show last 10 pages
				for i := totalPages-9; i <= totalPages; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			} else {
				// Show pages around current page
				for i := currentPage-4; i <= currentPage+5; i++ {
					<button
						hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(i) + "&equipsTo=" + selectedEquipsTo }
						hx-target="#item-list-container"
						hx-swap="innerHTML"
						class={ templ.CSSClasses{"pagination-button", templ.KV("active", i == currentPage)} }
						hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
					>
						{ strconv.Itoa(i) }
					</button>
				}
			}
		}

		if currentPage < totalPages {
			<button
				hx-get={ "/filter?itemType=" + selectedType + "&itemSubType=" + selectedSubType + "&characterName=" + selectedCharacter + "&page=" + strconv.Itoa(currentPage+1) + "&equipsTo=" + selectedEquipsTo }
				hx-target="#item-list-container"
				hx-swap="innerHTML"
				class="pagination-button"
				hx-include="#nameSearch, #minLevel, #maxLevel, #equipsToFilter"
			>
				Next
			</button>
		}
	</div>
}
